require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe AdminsController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Admin. As you add validations to Admin, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    { 
      "adm_username" => "freiredoteste", 
      "password" => "123456", 
      "adm_name" => "Freire do Teste", 
      "adm_cpf" => "87122670074", 
      "hospital_name" => "Hospital Freire" 
    }
  }

  let(:invalid_attributes) {
    { 
      "adm_username" => nil, 
      "password" => nil, 
      "adm_name" => nil, 
      "adm_cpf" => nil, 
      "hospital_name" => nil 
    }
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # AdminsController. Be sure to keep this updated too.
  let(:valid_session) {  
    { 
      "adm_username" => "freiredoteste", 
      "password" => "123456", 
      "adm_name" => "Freire do Teste", 
      "adm_cpf" => "87122670074", 
      "hospital_name" => "Hospital Freire" 
    } 
  }

  describe "GET #show" do
    it "returns a success response" do
      admin = Admin.create! valid_attributes
      get :show, params: {id: admin.to_param}, session: valid_session
      expect(response).to be_successful
    end
  end

  describe "GET #new" do
    it "returns a success response" do
      get :new, params: {}, session: valid_session
      expect(response).to be_successful
    end
  end

  describe "GET #edit" do
    it "returns a success response" do
      admin = Admin.create! valid_attributes
      get :edit, params: {id: admin.to_param}, session: valid_session
      expect(response).to be_successful
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new Admin" do
        expect {
          post :create, params: {admin: valid_attributes}, session: valid_session
        }.to change(Admin, :count).by(1)
      end

      it "redirects to the created admin" do
        post :create, params: {admin: valid_attributes}, session: valid_session
        expect(response).to redirect_to(admins_profile_path)
      end
    end

    context "with invalid params" do
      it "returns a success response (i.e. to display the 'new' template)" do
        post :create, params: {admin: invalid_attributes}, session: valid_session
        expect(response).to be_successful
      end
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) {
        { 
          "adm_username" => "danieldoteste", 
          "password" => "123456", 
          "adm_name" => "Daniel do Teste", 
          "adm_cpf" => "87122670074", 
          "hospital_name" => "Hospital Cordeiro" 
        }
      }

      it "updates the requested admin" do
        admin = Admin.create! valid_attributes
        put :update, params: {id: admin.to_param, admin: new_attributes}, session: valid_session
        admin.reload # The Method .reload aparently does thye normal behaviour of the requests not the behaviour that we want it to have
        expect(admin.adm_username).to match("danieldoteste")
        expect(admin.password).to match("123456")
        expect(admin.adm_name).to match("Daniel do Teste")
        expect(admin.adm_cpf).to match("87122670074")
        expect(admin.hospital_name).to match("Hospital Cordeiro")
        expect(response).to redirect_to(admin)
      end

      it "redirects to the admin" do
        admin = Admin.create! valid_attributes
        put :update, params: {id: admin.to_param, admin: valid_attributes}, session: valid_session
        expect(response).to redirect_to(admin)
      end
    end

    context "with invalid params" do
      it "returns a success response (i.e. to display the 'edit' template)" do
        admin = Admin.create! valid_attributes
        put :update, params: {id: admin.to_param, admin: invalid_attributes}, session: valid_session
        expect(response).to be_successful
      end
    end
  end
end
