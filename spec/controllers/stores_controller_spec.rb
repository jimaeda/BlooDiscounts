require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe StoresController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Store. As you add validations to Store, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {
      "name" => "Loja do Freire",
      "category" => "Freiregorias",
      "address" => "Rua Ouvidor Peleja",
      "email" => "afreire@ime.com.br",
      "phone" => "99999999"
    }
  }

  let(:invalid_attributes) {
    {    
      "name" => nil,
      "category" => "Freiregorias",
      "address" => nil,
      "email" => "alexandre.freire@ime.com.br",
      "phone" => nil
    }
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # StoresController. Be sure to keep this updated too.
  let(:valid_session) { 
    {
      "name" => "Loja do Freire",
      "address" => "Rua Ouvidor Peleja",
      "phone" => "99999999"
    }
  }

  describe "GET #index" do
    it "returns a success response" do
      Store.create! valid_attributes
      get :index, params: {}, session: valid_session
      expect(response).to be_successful
    end
  end

  describe "GET #show" do
    it "returns a success response" do
      store = Store.create! valid_attributes
      get :show, params: {id: store.to_param}, session: valid_session
      expect(response).to be_successful
    end
  end

  describe "GET #new" do
    it "returns a success response" do
      @admin = Admin.create!(
        :adm_username => "Freire",
        :password => "123456",
        :adm_name => "Freire Alexandre",
        :adm_cpf => "123456789",
        :hospital_name => "Freirospital"
      )
      allow(controller).to receive(:current_admin) { @admin }
      get :new, params: {}, session: valid_session
      expect(response).to be_successful
    end
  end

  describe "GET #edit" do
    it "returns a success response" do
      store = Store.create! valid_attributes
      get :edit, params: {id: store.to_param}, session: valid_session
      expect(response).to be_successful
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new Store" do
        expect {
          post :create, params: {store: valid_attributes}, session: valid_session
        }.to change(Store, :count).by(1)
      end

      it "redirects to the created store" do
        post :create, params: {store: valid_attributes}, session: valid_session
        expect(response).to redirect_to(admins_profile_path)
      end
    end

    context "with invalid params" do
      it "returns a success response (i.e. to display the 'new' template)" do
        post :create, params: {store: invalid_attributes}, session: valid_session
        expect(response).to be_successful
      end
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) {
        {
          "name" => "Loja do Cordeiro",
          "category" => "Cordeigorias",
          "address" => "Rua Drausio",
          "email" => "daniel.cordeiro@usp.br",
          "phone" => "88888888"
        }
      }

      it "updates the requested store" do
        store = Store.create! valid_attributes
        put :update, params: {id: store.to_param, store: new_attributes}, session: valid_session
        store.reload
        expect(store.name).to match("Loja do Cordeiro")
        expect(store.category).to match("Cordeigorias")
        expect(store.address).to match("Rua Drausio")
        expect(store.email).to match("daniel.cordeiro@usp.br")
        expect(store.phone).to match("88888888")
        expect(response).to redirect_to(admins_profile_path)
      end

      it "redirects to the store" do
        store = Store.create! valid_attributes
        put :update, params: {id: store.to_param, store: valid_attributes}, session: valid_session
        expect(response).to redirect_to(admins_profile_path)
      end
    end

    context "with invalid params" do
      it "returns a success response (i.e. to display the 'edit' template)" do
        store = Store.create! valid_attributes
        put :update, params: {id: store.to_param, store: invalid_attributes}, session: valid_session
        expect(response).to be_successful
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested store" do
      store = Store.create! valid_attributes
      expect {
        delete :destroy, params: {id: store.to_param}, session: valid_session
      }.to change(Store, :count).by(-1)
    end

    it "redirects to the stores list" do
      store = Store.create! valid_attributes
      delete :destroy, params: {id: store.to_param}, session: valid_session
      expect(response).to redirect_to(stores_url)
    end
  end

end
